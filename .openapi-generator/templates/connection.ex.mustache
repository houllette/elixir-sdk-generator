# NOTE: This file is based on a template used by [openapi-generator](https://github.com/openapitools/openapi-generator).
#
# Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

defmodule {{moduleName}}.Connection do
  @moduledoc """
  HTTP connection management for {{moduleName}}.

  Provides connection pooling, retry logic, and telemetry integration.
  """

  @type t :: Tesla.Env.client()

  @doc """
  Creates a new HTTP client with connection pooling via Finch.

  ## Options

    * `:base_url` - Base URL for API requests (default: from config)
    * `:adapter` - HTTP adapter (default: `{Tesla.Adapter.Finch, [name: {{moduleName}}.Finch]}`)
    * `:timeout` - Request timeout in milliseconds (default: 30_000)
    * `:retry` - Retry configuration (default: enabled)
      * `:max_retries` - Maximum number of retries (default: 3)
      * `:delay` - Initial delay in milliseconds (default: 100)
      * `:max_delay` - Maximum delay between retries (default: 5_000)
    * `:middleware` - Additional Tesla middleware

  ## Examples

      iex> {{moduleName}}.Connection.new()
      %Tesla.Client{...}

      iex> {{moduleName}}.Connection.new(base_url: "https://api.custom.com")
      %Tesla.Client{...}

      iex> {{moduleName}}.Connection.new(timeout: 60_000, retry: [max_retries: 5])
      %Tesla.Client{...}

  """
  @spec new(keyword()) :: t()
  def new(opts \\ []) do
    base_url = Keyword.get(opts, :base_url, default_base_url())
    timeout = Keyword.get(opts, :timeout, 30_000)
    retry_opts = Keyword.get(opts, :retry, [])
    custom_middleware = Keyword.get(opts, :middleware, [])

    middleware =
      [
        {Tesla.Middleware.BaseUrl, base_url},
        Tesla.Middleware.JSON,
        {Tesla.Middleware.Timeout, timeout: timeout},
        {Tesla.Middleware.Telemetry, metadata: %{module: {{moduleName}}}},
        retry_middleware(retry_opts)
      ] ++ custom_middleware

    adapter = Keyword.get(opts, :adapter, {Tesla.Adapter.Finch, name: {{moduleName}}.Finch})

    Tesla.client(middleware, adapter)
  end

  @doc """
  Returns the default base URL from application configuration.

  Falls back to compile-time base URL if not configured at runtime.
  """
  @spec default_base_url() :: String.t()
  def default_base_url do
    Application.get_env(:{{packageName}}, :base_url, "{{basePath}}")
  end

  # Build retry middleware with exponential backoff
  defp retry_middleware(opts) do
    max_retries = Keyword.get(opts, :max_retries, 3)
    delay = Keyword.get(opts, :delay, 100)
    max_delay = Keyword.get(opts, :max_delay, 5_000)

    {Tesla.Middleware.Retry,
     [
       delay: delay,
       max_retries: max_retries,
       max_delay: max_delay,
       should_retry: &should_retry?/1
     ]}
  end

  # Determine if a request should be retried based on status code or error
  defp should_retry?({:ok, %{status: status}}) when status in [408, 429, 500, 502, 503, 504], do: true
  defp should_retry?({:ok, _}), do: false
  defp should_retry?({:error, _}), do: true
end
